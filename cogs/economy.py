import disnake
from disnake.ext import commands
import pymongo
from pymongo import MongoClient
import os
from random import randint
import asyncio
import time
import datetime
from datetime import timezone, tzinfo, timedelta
from random import sample
import array
import math
from file1 import triada_num
from main import sets

dep_options = [
    disnake.SelectOption(label = '–ú–æ–π –¥–µ–ø–æ–∑–∏—Ç', value = "info", description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç", emoji = "üíµ"),
    disnake.SelectOption(label = '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç', value = "put", description = "–ü–æ–ª–æ–∂–∏—Ç—å Cooper Coins –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç —Å—á–µ—Ç", emoji = "ü™ô"),
    disnake.SelectOption(label = '–°–Ω—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç', value = "take", description = "–°–Ω—è—Ç—å Cooper Coins —Å –¥–µ–ø–æ–∑–∏—Ç —Å—á—ë—Ç–∞", emoji = "ü™ô"),
    disnake.SelectOption(label = '–†–∞—Å—á–∏—Ç–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç', value = "calc", description = "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞", emoji = "üìü")
]

dep_options1 = [
    disnake.SelectOption(label = '–ú–æ–π –¥–µ–ø–æ–∑–∏—Ç', value = "info", description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç", emoji = "üíµ"),
    disnake.SelectOption(label = '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç', value = "put", description = "–ü–æ–ª–æ–∂–∏—Ç—å Cooper Coins –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç —Å—á–µ—Ç", emoji = "ü™ô"),
    disnake.SelectOption(label = '–°–Ω—è—Ç—å –¥–µ–ø–æ–∑–∏—Ç', value = "take", description = "–°–Ω—è—Ç—å Cooper Coins —Å –¥–µ–ø–æ–∑–∏—Ç —Å—á—ë—Ç–∞", emoji = "ü™ô"),
    disnake.SelectOption(label = '–†–∞—Å—á–∏—Ç–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç', value = "calc", description = "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞", emoji = "üìü"),
    disnake.SelectOption(label = '–í—ã—Ö–æ–¥', value = "exit", description = "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", emoji = "üîô")
]

class MyModal(disnake.ui.Modal):
    def __init__(self, title, components):
        self.cluster = MongoClient("mongodb+srv://andrewnobot:xuInmV8QmD9GRR5c@cluster0.28biu.mongodb.net/opiumdb?retryWrites=true&w=majority")
        self.coll = self.cluster.opiumdb.collopiumdb
        super().__init__(title = title, components = components)

    async def callback(self, interaction: disnake.ModalInteraction):
        try:
            amount = 0
            for a in dict.values(interaction.text_values):
                amount = int(a)
            money = self.coll.find_one({"_id": interaction.author.id})["cash"]
            if amount <= 0:
                await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
            elif amount > money:
                await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, y –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins!**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
            else:
                self.coll.update_one({"_id": interaction.author.id}, {"$inc": {"cash": -amount}})
                self.coll.update_one({"_id": interaction.author.id}, {"$inc": {"deposit": amount}})
                emb = disnake.Embed(description = f'**–í—ã –ø–æ–ª–æ–∂–∏–ª–∏ `{amount}` Cooper Coins –Ω–∞ –≤–∞—à –¥–µ–ø–æ–∑–∏—Ç —Å—á—ë—Ç**', color = 0x28e91c)
                emb.set_author(name = f'{interaction.author} | –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞', icon_url = interaction.author.avatar)
                emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞ ‚Ä¢ {int(self.coll.find_one({"_id": interaction.author.id})["deposit"])} Cooper Coins')
                await interaction.response.edit_message(embed = emb, view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
        except ValueError:
            await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))


class MyModal1(disnake.ui.Modal):
    def __init__(self, title, components):
        self.cluster = MongoClient("mongodb+srv://andrewnobot:xuInmV8QmD9GRR5c@cluster0.28biu.mongodb.net/opiumdb?retryWrites=true&w=majority")
        self.coll = self.cluster.opiumdb.collopiumdb
        super().__init__(title = title, components = components)

    async def callback(self, interaction: disnake.ModalInteraction):
        try:
            amount = 0
            for a in dict.values(interaction.text_values):
                amount = int(a)
            money = self.coll.find_one({"_id": interaction.author.id})["deposit"]
            if amount <= 0:
                await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
            elif amount > money:
                await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–µ**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
            else:
                self.coll.update_one({"_id": interaction.author.id}, {"$inc": {"deposit": -amount}})
                self.coll.update_one({"_id": interaction.author.id}, {"$inc": {"cash": amount}})
                emb = disnake.Embed(description = f'**–í—ã —Å–Ω—è–ª–∏ `{amount}` Cooper Coins —Å –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç —Å—á—ë—Ç–∞**', color = 0xd36262)
                emb.set_author(name = f'{interaction.author} | –°–Ω—è—Ç–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞', icon_url = interaction.author.avatar)
                emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞ ‚Ä¢ {int(self.coll.find_one({"_id": interaction.author.id})["deposit"])} Cooper Coins')
                await interaction.response.edit_message(embed = emb, view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
        except ValueError:
            await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))

class MyModal3(disnake.ui.Modal):
    def __init__(self, title, components):
        self.cluster = MongoClient("mongodb+srv://andrewnobot:xuInmV8QmD9GRR5c@cluster0.28biu.mongodb.net/opiumdb?retryWrites=true&w=majority")
        self.coll = self.cluster.opiumdb.collopiumdb
        super().__init__(title = title, components = components)

    async def callback(self, interaction: disnake.ModalInteraction):
        try:
            var_list = []
            for a in dict.values(interaction.text_values):
                var_list.append(int(a))
            hours = var_list[0]
            summ = var_list[1]
            if hours > 2160 and interaction.author.id != 382522784841990144:
                await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, –Ω–µ –±–æ–ª–µ–µ 2160 —á–∞—Å–æ–≤!**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
            elif hours <= 0:
                await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
            else:
                dep = summ
                s = []
                i = 0
                while i < hours:
                    if (dep >= 1 and dep <= 99999):
                        procent = 1.02
                    elif (dep >= 100000 and dep <= 999999):
                        procent = 1.01
                    elif (dep >= 1000000 and dep <= 9999999):
                        procent = 1.005
                    elif (dep >= 10000000 and dep <= 99999999):
                        procent = 1.0025
                    elif (dep >= 100000000 and dep <= 1000000000):
                        procent = 1.000625
                    elif (dep >= 1000000000 and dep <= 10000000000):
                        procent = 1.00015
                    elif (dep >= 10000000000 and dep <= 100000000000):
                        procent = 1.00004
                    elif (dep >= 100000000000 and dep <= 1000000000000):
                        procent = 1.000005
                    else:
                        break
                    s.append(dep * procent)
                    i = i + 1
                    dep = dep * procent
                sn = int(s[hours - 1])
                if summ is None:
                    z = int(sn - (self.coll.find_one({"_id": interaction.author.id})["deposit"]))
                else:
                    z = int(sn - summ)
                await interaction.response.edit_message(embed = disnake.Embed(description = f'**–ù–∞ –≤–∞—à–µ–º –¥–µ–ø–æ–∑–∏—Ç —Å—á—ë—Ç–µ –±—É–¥–µ—Ç:** {triada_num(sn)} **Cooper Coins\n(—Ä–∞–∑–Ω–∏—Ü–∞** {triada_num(z)} **cc)**', color = 0xcd14d3), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))
        except ValueError:
            await interaction.response.edit_message(embed = disnake.Embed(description = f'**{interaction.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º")))

class MyDeposit(disnake.ui.Select):
    def __init__(self, options, placeholder):
        self.cluster = MongoClient("mongodb+srv://andrewnobot:xuInmV8QmD9GRR5c@cluster0.28biu.mongodb.net/opiumdb?retryWrites=true&w=majority")
        self.coll = self.cluster.opiumdb.collopiumdb
        super().__init__(placeholder = placeholder, options = options, max_values = 1)
    async def callback(self, interaction: disnake.Interaction):
        data = self.coll.find_one({"_id": interaction.author.id})
        for val in self.values:
            if val == "info":
                data = self.coll.find_one({"_id": interaction.author.id})
                dep = data["deposit"]
                emb = disnake.Embed(description = f'**–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç —Å—á—ë—Ç–∞: `{int(dep)}` Cooper Coins**', timestamp = interaction.created_at, color = 0x6117e0)
                emb.set_author(name = f'{interaction.author} | –î–µ–ø–æ–∑–∏—Ç', icon_url = interaction.author.avatar)
                emb.set_footer(text = f'Opium üå¥ Bot')
                await interaction.response.edit_message(embed = emb, view = Select1().add_item(MyDeposit(options = dep_options1, placeholder = "üíµ –ú–æ–π –¥–µ–ø–æ–∑–∏—Ç")))
            elif val == 'put':
                await interaction.response.send_modal(MyModal(title = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞", components = [disnake.ui.TextInput(label = f"–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(data['cash'])} Cooper Coins", placeholder = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç", style = disnake.TextInputStyle.short, value = None, custom_id = "ttss", min_length = 1, max_length = 20)]))
            elif val == 'take':
                await interaction.response.send_modal(MyModal1(title = "–°–Ω—è—Ç–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞", components = [disnake.ui.TextInput(label = f"–ë–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞ ‚Ä¢ {triada_num(int(data['deposit']))} Cooper Coins", placeholder = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç", style = disnake.TextInputStyle.short, value = None, custom_id = "ttss", min_length = 1, max_length = 20)]))
            elif val == 'calc':
                options = [
                        disnake.ui.TextInput(label = "–ù–µ –±–æ–ª–µ–µ 2 160 —á–∞—Å–æ–≤!", placeholder = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤", style = disnake.TextInputStyle.short, value = None, custom_id = "dc", min_length = 1, max_length = 4),
                        disnake.ui.TextInput(label = "–°—É–º–º–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –¥–µ–ø–æ–∑–∏—Ç", placeholder = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞", style = disnake.TextInputStyle.short, value = int(data['deposit']), custom_id = 'dc1', min_length = 1, max_length = 20)
                    ]
                await interaction.response.send_modal(MyModal3(title = "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–µ–ø–æ–∑–∏—Ç–∞", components = options))
            elif val == 'exit':
                dep = int(self.coll.find_one({"_id": interaction.author.id})['deposit'])
                i = 0
                n = 10
                el = ['üîπ']
                while i < 7:
                    if (dep >= 10000 * n and dep <= 99999 * n):
                        el.append('üî∏')
                    else:
                        el.append('üîπ')
                    i += 1
                    n = n * 10
                if (dep >= 1 and dep <= 99999):
                    el = ['üî∏', 'üîπ', 'üîπ', 'üîπ' ,'üîπ' ,'üîπ' ,'üîπ' ,'üîπ']
                emb = disnake.Embed(description = "**‚è≥ –î–µ–ø–æ–∑–∏—Ç –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ —á–∞—Å.\n\nüîã –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞:**\n ", color = 0x6117e0, timestamp = interaction.created_at)
                emb.set_author(name = f"{interaction.author.name}#{interaction.author.discriminator} | –î–µ–ø–æ–∑–∏—Ç –º–µ–Ω—é", icon_url = interaction.author.display_avatar)
                emb.add_field(name = 'üî∞ –£—Ä–æ–≤–µ–Ω—å', value = f"{el[0]} 1 LVL\n{el[1]} 2 LVL\n{el[2]} 3 LVL\n{el[3]} 4 LVL\n{el[4]} 5 LVL\n{el[5]} 6 LVL\n{el[6]}7 LVL\n{el[7]} 8 LVL")
                emb.add_field(name = "üí∞ –ë–∞–ª–∞–Ω—Å", value = f"{el[0]} 1 - 100K\n{el[1]} 100K - 1M\n{el[2]} 1M - 10M\n{el[3]} 10M - 100M\n{el[4]} 100M - 1B\n{el[5]} 1B - 10B\n{el[6]} 10B - 100B\n{el[7]} 100B - 1T")
                emb.add_field(name = "üîã –ü—Ä–æ—Ü–µ–Ω—Ç", value = f"{el[0]} 2%\n{el[1]} 1%\n{el[2]} 0.5%\n{el[3]} 0.25%\n{el[4]} 0.0625%\n{el[5]}0.015%\n{el[6]} 0.004%\n{el[7]} 0.0005%")
                emb.set_thumbnail(url = "https://img.freepik.com/free-vector/money-bag-with-pile-coins-and-bills-cash_24877-63660.jpg?w=2000")
                emb.set_footer(text = "Opium üå¥ Team", icon_url = "https://images-ext-2.discordapp.net/external/0k7jh0lZJpaJSxawcHt4wV3kF2D7Eltmso22nbAhIPM/%3Fsize%3D1024/https/cdn.discordapp.com/avatars/722921602026700861/654ff8c616269acc148f204c17670aaa.png?width=671&height=671")
                placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º"
                await interaction.response.edit_message(embed = emb, view = Select1().add_item(MyDeposit(options = dep_options, placeholder = placeholder)))
            else:
                pass

class Select1(disnake.ui.View):
    def __init__(self):
        super().__init__()

class EconomyNew(commands.Cog):

    def __init__(self, client):
        self.client = client    
        self.cluster = MongoClient("mongodb+srv://andrewnobot:xuInmV8QmD9GRR5c@cluster0.28biu.mongodb.net/opiumdb?retryWrites=true&w=majority")
        self.coll = self.cluster.opiumdb.collopiumdb
        self.prx = self.cluster.opiumdb.prefixcoll

    #ON MEMBER JOIN
    @commands.Cog.listener()
    async def on_member_join(self, member):
        post = {
            "_id": member.id,
            "g_id": member.guild.id,
            "name": f"{member.name}#{member.discriminator}",
            "cash": 10,
            "xp": 0,
            "lvl": 1,
            "daily": 1,
            "sbonus": 10,
            "spot": 0,
            "dsbonus": 50,
            "splist": [0],
            "sprice": 50,
            "dsprice": 50,
            "loan": 0,
            "deposit": 0,
            "jpwin": 2500
        }
        if self.coll.count_documents({"_id": member.id}) == 0:
            self.coll.insert_one(post)


    #ON MESSAGE
    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author.bot:
            return
        if not message.guild.id == 430772415480594443:
            return
        user = message.author
        data = self.coll.find_one({"_id": user.id})
        lvl_xp = 8 + 10 * data["lvl"]
        cash_up = 10 + 10 * data["lvl"]
        if data["xp"] < lvl_xp:
            self.coll.update_one({"_id": user.id}, {"$set": {"xp": data["xp"] + 1}})
        if data["xp"] >= lvl_xp:
            self.coll.update_one({"_id": user.id}, {"$set": {"lvl": data["lvl"] + 1}})
            self.coll.update_one({"_id": user.id}, {"$set": {"xp": 0}})
            self.coll.update_one({"_id": user.id}, {"$inc": {"cash": cash_up}})
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": -cash_up}})
            await message.channel.send(embed = disnake.Embed(description = f'**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: `{data["lvl"] + 1}` (+{cash_up} cc)**', color = 0xd7ff5d))
   
    #BALANCE
    @commands.slash_command(description = "Economy: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def balance(self, ctx: disnake.AppCmdInter, member: disnake.Member = None):
        if member is None:
            await ctx.send(embed = disnake.Embed(description = f'**–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ctx.author.mention}: {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} Cooper Coins**', color = 0x00a5ff))
        else:
            await ctx.send(embed = disnake.Embed(description = f'**–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}: {triada_num(self.coll.find_one({"_id": member.id})["cash"])} Cooper Coins**', color = 0x00a5ff))

    #STATS
    @commands.slash_command(description = "Economy: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def stats(self, ctx: disnake.AppCmdInter, member: disnake.Member = None):
        if member is None:
            m = ctx.author
            data = self.coll.find_one({"_id": ctx.author.id})
        else:
            data = self.coll.find_one({"_id": member.id})
            m = member
        a_xp = data["xp"]
        a_cash = triada_num(data["cash"])
        d_cash = triada_num(int(data['deposit']))
        a_lvl = data["lvl"]
        sbonus = data["sbonus"]
        spot = data["spot"]
        dsbonus = data["dsbonus"]
        lvl_xp = 10 + 10 * data["lvl"]
        emb = disnake.Embed(description = f'**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {m.mention}\n\n–£—Ä–æ–≤–µ–Ω—å: `{a_lvl}` Lvl\n–û–ø—ã—Ç: `{a_xp}`/`{lvl_xp}` Xp\n–ë–∞–ª–∞–Ω—Å: `{a_cash}` Cooper Coins\n–ë–∞–ª–∞–Ω—Å –¥–µ–ø–æ–∑–∏—Ç–∞: `{d_cash}` Cooper Coins**', color = 0x00ffd5)
        emb.set_author(name = f'{m} | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon_url = m.avatar)
        emb.add_field(name = '–ù–∞–≤—ã–∫–∏:', value = f'\n**üíø –†—É–ª–µ—Ç–∫–∞(–≤—ã–∏–≥—Ä—ã—à): –æ—Ç `{round((sbonus - 9) * 0.7)}` –¥–æ `{sbonus}` cc\nüíø –†—É–ª–µ—Ç–∫–∞(–ø—Ä–æ—Ü–µ–Ω—Ç Jackpot): `{spot}%`\nüìÄ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞(–≤—ã–∏–≥—Ä—ã—à): –æ—Ç `{round((dsbonus - 20) * 0.7)}` –¥–æ `{dsbonus}` cc**')
        emb.set_footer(text = 'Opium üå¥ Team', icon_url = 'https://images-ext-2.disnakeapp.net/external/0k7jh0lZJpaJSxawcHt4wV3kF2D7Eltmso22nbAhIPM/%3Fsize%3D1024/https/cdn.disnakeapp.com/avatars/722921602026700861/654ff8c616269acc148f204c17670aaa.png?width=671&height=671')
        await ctx.send(embed = emb)
  
    #PAY
    @commands.slash_command(description = "Economy: –ü–µ—Ä–µ–¥–∞—Ç—å Cooper Coins –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    async def pay(self, ctx: disnake.AppCmdInter, member: disnake.Member, amount: int = commands.Param(gt = 0)):
        acash = self.coll.find_one({"_id": ctx.author.id})["cash"]
        mcash = self.coll.find_one({"_id": member.id})["cash"]
        if amount > acash:
            ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, y –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins!**', color = 0xff0000), ephemeral = True)
        elif ctx.author == member:
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ!**', color = 0xff0000), ephemeral = True)
        else:
            self.coll.update_one({"_id": ctx.author.id},
            {"$set": {"cash": acash - amount}})

            self.coll.update_one({"_id": member.id},
            {"$set": {"cash": mcash + amount}})

            self.coll.update_one({"_id": 1}, {"$inc": {"cash": amount}})
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention} –ø–µ—Ä–µ–¥–∞–ª(a) {member.mention} `{amount}` Cooper Coins**', color = 0xbeff00))
    

    #SET BALANCE
    @sets.sub_command(name = "balance", description = "Economy: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    async def set_balance(self, ctx: disnake.AppCmdInter, member: disnake.Member, amount: int):
        if amount < 0:
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), ephemeral = True)
        else:
            self.coll.update_one({"_id": member.id},
            {"$set": {"cash": amount}})
            await ctx.send(embed = disnake.Embed(description = f'**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä `{ctx.author.display_name}` —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n`{member.display_name}`: `{self.coll.find_one({"_id": member.id})["cash"]}` —Å—Å**', color = 0x20947a))

    #SET LVL
    @sets.sub_command(name = "lvl", description = "Economy: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å")
    async def set_lvl(self, ctx: disnake.AppCmdInter, member: disnake.Member, lvl: int):
        if lvl <= 0:
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), ephemeral = True)
        else:
            self.coll.update_one({"_id": member.id}, {"$set": {"lvl": lvl}})
            await ctx.send(embed = disnake.Embed(description = f'**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä `{ctx.author.display_name}` —É—Å—Ç–∞–Ω–æ–≤–∏–ª `{self.coll.find_one({"_id": member.id})["lvl"]}` —É—Ä–æ–≤–µ–Ω—å\n–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{member.display_name}`**', color = 0x20947a))

    #DELETE STATS
    @commands.slash_command(description = "Economy: –û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫—É")
    @commands.default_member_permissions(administrator = True)
    async def delete_stats(self, ctx: disnake.AppCmdInter, member: disnake.Member):
        await ctx.send(embed = disnake.Embed(description = f'**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {ctx.author.mention} –æ–±–Ω—É–ª–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}**', color = 0xc98224))
        up = self.coll.update_one
        m = {"_id": member.id}
        up(m, {"$set": {"cash": 10}})
        up(m, {"$set": {"xp": 0}})
        up(m, {"$set": {"lvl": 1}})
        up(m, {"$set": {"daily": 1}})
        up(m, {"$set": {"sbonus": 10}})
        up(m, {"$set": {"spot": 0}})
        up(m, {"$set": {"dsbonus": 50}})
        up(m, {"$set": {"splist": [0]}})
        up(m, {"$set": {"sprice": 50}})
        up(m, {"$set": {"dsprice": 50}})
        up(m, {"$set": {"loan": 0}})
        up(m, {"$set": {"deposit": 0}})
        up(m, {"$set": {"jpwin": 2500}})

    #SPIN
    @commands.slash_command(description = "Economy: –†—É–ª–µ—Ç–∫–∞(1 —Ä–∞–∑ –≤ —á–∞—Å)")
    @commands.cooldown(1, 3600, commands.BucketType.user)
    async def spin(self, ctx: disnake.AppCmdInter):
        prefix = self.prx.find_one({"_id": ctx.guild.id})["prefix"]
        sbonus = self.coll.find_one({"_id": ctx.author.id})["sbonus"]
        splist = self.coll.find_one({"_id": ctx.author.id})["splist"]
        n1 = randint(1, 101)
        if n1 in splist:
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": 2500}})
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": -2500}})
            self.coll.update_one({"_id": 1}, {"$inc": {"bonus_cash": 25}})
            emb = disnake.Embed(title = '–î–∂–µ–∫–ø–æ—Ç ü§© ü•≥ üéâ',description = f'**–í—ã–∏–≥—Ä—ã—à: {triada_num(2500)} cc**', color = 0xffa000)
            emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
            emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} Cooper Coins')
            await ctx.send(embed = emb)
            channel = self.client.get_channel(789806580891123752)
            com = ', '
            await channel.send(embed = disnake.Embed(description = f"**User {ctx.author.mention} got a jackpot with code number: `{n1}`\nList of his lucky numbers:\n`{com.join(map(str, splist))}`**", color = 0xffa000))
        else:
            msb = round((sbonus - 9) * 0.7)
            n = randint(msb, sbonus)
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": n}})
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": -n}})
            self.coll.update_one({"_id": 1}, {"$inc": {"bonus_cash": n * 0.01}})
            emb = disnake.Embed(description = f'**–í—ã–∏–≥—Ä—ã—à: `{triada_num(n)}` cc**', color = 0x00ff2e)
            emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
            emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} Cooper Coins')
            await ctx.send(embed = emb)

    #SPIN ERROR
    @spin.error
    async def spin_error(self, ctx, error):
        if isinstance(error, disnake.ext.commands.errors.CommandOnCooldown):
            m = time.strftime("%M", time.gmtime(error.retry_after))
            s = time.strftime("%S", time.gmtime(error.retry_after))
            if int(m) < 10:
                m = m[1:]
            else:
                pass
            await ctx.send(embed = disnake.Embed(description = '**–¢—ã —É–∂–µ —Å—ã–≥—Ä–∞–ª. –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {} –º–∏–Ω. {} —Å–µ–∫.**'.format(m, s), color = 0xff0000), ephemeral = True)

    #TRY
    @commands.slash_command(description = "Economy: –£–¥–≤–æ–∏—Ç—å —Å—É–º–º—É. –®–∞–Ω—Å 50%", name = 'try')
    @commands.cooldown(1, 1, commands.BucketType.user)
    async def _try(self, ctx, amount: int = commands.Param(gt = 0, lt = 1000)):
        cs = ctx.send
        de = disnake.Embed
        money = self.coll.find_one({"_id": ctx.author.id})["cash"]
        if amount > money:
            await cs(embed = de(description = f'**{ctx.author.mention}, y –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins!**', color = 0xff0000), ephemeral = True)
        else:
            n = randint(1, 20)
            a = [10, 5, 2, 1, 4, 7, 12, 9, 15, 11] 
            b = [18, 17, 19, 6, 16, 3, 14, 20, 8, 13]
            if n in a:
                win = f'**Win üòú, +{amount} Cooper Coins**'
                clr = 0x26cb00
                x = amount
            elif n in b:
                win = f'**Lose üò≠, -{amount} Cooper Coins**'
                clr = 0xd50000
                x = -amount
            else:
                pass
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": x}})
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": -x}})
            emb = de(description = win, color = clr)
            emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
            emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} Cooper Coins')
            await cs(embed = emb)

    #TRY ERROR
    @_try.error
    async def _try_error(self, ctx, error):
        if isinstance(error, disnake.ext.commands.errors.CommandOnCooldown):
            await ctx.send(f"**{ctx.author.mention}, –≤–æ—É, –≤–æ—É, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç–æ!**", ephemeral = True)

    #SPIN UP
    @commands.slash_command(description = "Economy: –ü–æ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ")
    async def spin_up(self, ctx, count: int = None):
        if count is None:
            data = self.coll.find_one({"_id": ctx.author.id})
            cash = data["cash"]
            sbonus = data["sbonus"]
            sprice = data["sprice"]
            if cash < sprice:
                await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins. {cash}/{sprice} cc**', color = 0xff0000), ephemeral = True)
            else:
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": -sprice}})
                emb = disnake.Embed(title = f'–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ x1 üîº (-{sprice} cc)', description  = f'**üíø –†—É–ª–µ—Ç–∫–∞(–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à): `{sbonus}` -> `{sbonus + 1}` cc**', color = 0xfdff4b)
                emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
                emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id}))["cash"]} cc | Next update ‚Ä¢ {sprice + 5} cc')
                await ctx.send(embed = emb)
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"sbonus": 1}})
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"sprice": 5}})
        else:
            data = self.coll.find_one({"_id": ctx.author.id})
            cash = data["cash"]
            sbonus = data["sbonus"]
            sprice = data["sprice"]
            a = round(sprice + ((count - 1) * 5))
            s = round(((sprice + a) / 2) * count)
            if cash < s:
                await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins. {cash}/{s} cc**', color = 0xff0000), ephemeral = True)
            else:
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": -s}})
                emb = disnake.Embed(title = f'–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ x{count} üîº (-{s} cc)', description  = f'**üíø –†—É–ª–µ—Ç–∫–∞(–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à): `{sbonus}` -> `{sbonus + (count * 1)}` cc**', color = 0xfdff4b)
                emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
                emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} cc | Next update ‚Ä¢ {a + 5} cc')
                await ctx.send(embed = emb)
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"sbonus": count * 1}})
                self.coll.update_one({"_id": ctx.author.id}, {"$set": {"sprice": a + 5}})

    #DAILY SPIN UP        
    @commands.slash_command(description = "Economy: –ü–æ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä—É–ª–µ—Ç–∫–µ")
    async def daily_spin_up(self, ctx, count: int = None):
        if count is None:
            data = self.coll.find_one({"_id": ctx.author.id})
            cash = data["cash"]
            dsbonus = data["dsbonus"]
            dsprice = data["dsprice"]
            if cash < dsprice:
                await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins. {cash}/{dsprice} cc**', color = 0xff0000), ephemeral = True)
            else:
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": -dsprice}})
                emb = disnake.Embed(title = f'–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ x1 üîº (-{dsprice} cc)', description  = f'**üìÄ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞(–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à): `{dsbonus}` -> `{dsbonus + 5}` cc**', color = 0xfdff4b)
                emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
                emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} cc | Next update ‚Ä¢ {dsprice + 5} cc')
                await ctx.send(embed = emb)
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"dsbonus": 5}})
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"dsprice": 5}})
        else:
            data = self.coll.find_one({"_id": ctx.author.id})
            cash = data["cash"]
            dsbonus = data["dsbonus"]
            dsprice = data["dsprice"]
            a = round(dsprice + ((count - 1) * 5))
            s = round(((dsprice + a) / 2) * count)
            if cash < s:
                await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins. {cash}/{s} cc**', color = 0xff0000), ephemeral = True)
            else:
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": -s}})
                emb = disnake.Embed(title = f'–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ x{count} üîº (-{s} cc)', description  = f'**üíø –†—É–ª–µ—Ç–∫–∞(–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à): `{dsbonus}` -> `{dsbonus + (count * 5)}` cc**', color = 0xfdff4b)
                emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
                emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} cc | Next update ‚Ä¢ {a + 5} cc')
                await ctx.send(embed = emb)
                self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"dsbonus": count * 5}})
                self.coll.update_one({"_id": ctx.author.id}, {"$set": {"dsprice": a + 5}})

    #GIVE
    @commands.slash_command(description = "Economy: –ü–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–∑ –±–∞–Ω–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É")
    @commands.default_member_permissions(administrator = True)
    async def give(self, ctx, member: disnake.Member, amount: int, *, reason = None):
        if amount <= 0:
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), ephemeral = True)
        else:
            self.coll.update_one({"_id": member.id}, {"$inc": {"cash": amount}})
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": -amount}})
            emb = disnake.Embed(description = f'**`{ctx.author.display_name}` –Ω–∞—á–∏—Å–ª–∏–ª `{amount}` Cooper Coins\n–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`{member.display_name}`. –ü—Ä–∏—á–∏–Ω–∞: {reason}**', color = 0x20947a)
            await ctx.send(embed = emb)

    #BANK
    @commands.slash_command(description = "Economy: –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–∞")
    async def bank(self, ctx):
        money = self.coll.find_one({"_id": 1})["cash"]
        bonus_cash = int(self.coll.find_one({"_id": 1})["bonus_cash"])
        e = disnake.Embed(description = f'**üí∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–∞: `{triada_num(money)}` Cooper Coins**\n**ü§ë –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å—á—ë—Ç–∞: `{triada_num(bonus_cash)}` Cooper Coins**', timestamp = ctx.created_at, color = 0x5797af)
        e.set_author(name = f'{ctx.guild.name} | Genesis Bank', icon_url = ctx.guild.icon)
        e.set_footer(text = 'Opium Team')
        await ctx.send(embed = e)		

    #DAILY SPIN
    @commands.slash_command(description = "–ï–∂–µ–¥–Ω–µ—ã–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞")
    async def daily_spin(self, ctx):
        data = self.coll.find_one({"_id": ctx.author.id})
        dsbonus = data["dsbonus"]
        spot = data["spot"]
        sp = spot + 1
        sbonus = data["sbonus"]
        daily = self.coll.find_one({"_id": ctx.author.id})["daily"]
        if daily == 1:
            mdsb = round((dsbonus - 20) * 0.7)
            n = randint(mdsb, dsbonus)
            data = self.coll.find_one({"_id": ctx.author.id})
            x = 2 + 2 * data["lvl"]
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"xp": x}})
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": n}})
            emb = disnake.Embed(title = '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ‚úÖ', description = f'**–ù–∞–≥—Ä–∞–¥—ã:\nüí∞ {triada_num(n)} Cooper Coins\nüíé {x} Xp**\n', color = 0x00ff2e)
            if spot < 15:
                emb.add_field(name = '–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ ‚¨ÜÔ∏è', value = f'**üíø –†—É–ª–µ—Ç–∫–∞(–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à): `{sbonus}` -> `{sbonus + 5}` cc\nüíø –†—É–ª–µ—Ç–∫–∞(–ø—Ä–æ—Ü–µ–Ω—Ç Jackpot): `{spot}%` -> `{sp}%`\nüìÄ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞(–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à): `{dsbonus}` -> `{dsbonus + 10}` cc**')
                lst = sample(range(1, 102), sp)
                self.coll.update_one({"_id": ctx.author.id}, {"$set": {"splist": lst}})
                self.coll.update_one({"_id": ctx.author.id}, {"$set": {"spot": sp}})
            else:
                emb.add_field(name = '–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ ‚¨ÜÔ∏è', value = f'**üíø –†—É–ª–µ—Ç–∫–∞(–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à): `{sbonus}` -> `{sbonus + 5}` cc\nüíø –†—É–ª–µ—Ç–∫–∞(–ø—Ä–æ—Ü–µ–Ω—Ç Jackpot): `{spot}%` Max Lvl\nüìÄ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞(–º–∞–∫—Å. –≤—ã–∏–≥—Ä—ã—à): `{dsbonus}` -> `{dsbonus + 10}` cc**')
            emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
            emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} Cooper Coins')
            await ctx.send(embed = emb)
            self.coll.update_one({"_id": ctx.author.id}, {"$set": {"sbonus": sbonus + 5}})
            self.coll.update_one({"_id": ctx.author.id}, {"$set": {"dsbonus": dsbonus + 10}})
            self.coll.update_one({"_id": ctx.author.id}, {"$set": {"daily": 2}})
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": -n}})
            self.coll.update_one({"_id": 1}, {"$inc": {"bonus_cash": n * 0.01}})
        else:
            await ctx.send(embed = disnake.Embed(description = '**–¢—ã —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∏–≥—Ä–∞–ª!**', color = 0xff0004))

    #TOP PLAYERS [COOPER COINS\LEVEL]
    @commands.slash_command(name = 'topplayers', description = "–°–ø–∏—Å–∫–∏ –ª–∏–¥–µ—Ä–æ–≤")
    async def topplayers(self, ctx, name = commands.Param(choices = ["–ü–æ —É—Ä–æ–≤–Ω—é", "–ü–æ –±–∞–ª–∞–Ω—Å—É"])):
        prefix = self.prx.find_one({"_id": ctx.guild.id})["prefix"]
        if name == '–ü–æ –±–∞–ª–∞–Ω—Å—É':
            top = self.coll.find().sort("cash", -1).limit(6).skip(2)
            leaders = []
            for t in top:
                leaders.append(f"<@{t['_id']}>: {t['cash']}")
            emb = disnake.Embed(description = f"**1. {leaders[0]} Cooper Coins\n\n2. {leaders[1]} Cooper Coins\n\n3. {leaders[2]} Cooper Coins\n\n4. {leaders[3]} Cooper Coins\n\n5. {leaders[4]} Cooper Coins**", color = 0x32aafd, timestamp = ctx.created_at)
            emb.set_author(name = f'{ctx.guild.name} | Leaderboard (Balance)', icon_url = ctx.guild.icon)
            emb.set_footer(text = 'Opium Team', icon_url = 'https://cdn.disnakeapp.com/avatars/722921602026700861/654ff8c616269acc148f204c17670aaa.webp?size=1024')
            await ctx.send(embed = emb)
        elif name == '–ü–æ —É—Ä–æ–≤–Ω—é':
            top = self.coll.find().sort("lvl", -1).limit(6).skip(1)
            leaders = []
            for t in top:
                leaders.append(f"<@{t['_id']}>: {t['lvl']}")
            emb = disnake.Embed(description = f"**1. {leaders[0]} —É—Ä–æ–≤–µ–Ω—å\n\n2. {leaders[1]} —É—Ä–æ–≤–µ–Ω—å\n\n3. {leaders[2]} —É—Ä–æ–≤–µ–Ω—å\n\n4. {leaders[3]} —É—Ä–æ–≤–µ–Ω—å\n\n5. {leaders[4]} —É—Ä–æ–≤–µ–Ω—å**", color = 0x32aafd, timestamp = ctx.created_at)
            emb.set_author(name = f'{ctx.guild.name} | Leaderboard (Lvl)', icon_url = ctx.guild.icon)
            emb.set_footer(text = 'Opium Team', icon_url = 'https://cdn.disnakeapp.com/avatars/722921602026700861/654ff8c616269acc148f204c17670aaa.webp?size=1024')
            await ctx.send(embed = emb)
        else:
            pass

    #UP INFO            
    @commands.slash_command(description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤")
    async def up_info(self, ctx):
        data = self.coll.find_one({"_id": ctx.author.id})
        sp = data["sprice"]
        dsp = data["dsprice"]
        cash = data["cash"]
        discr = (2 * sp - 5) ** 2 + 40 * cash
        n1 = (-(2 * sp - 5) + math.sqrt(discr)) / (10)
        discr1 = (2 * dsp - 5) ** 2 + 40 * cash
        n2 = (-(2 * dsp - 5) + math.sqrt(discr1)) / (10)
        emb = disnake.Embed(title = f'–¶–µ–Ω—ã –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è {ctx.author.display_name}', description = f'**üíø –†—É–ª–µ—Ç–∫–∞. –¶–µ–Ω–∞: {sp} Cooper Coins**\n        (–ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å {int(n1)} —Ä–∞–∑)\n**üìÄ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞. –¶–µ–Ω–∞: {dsp} Cooper Coins**\n        (–ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å {int(n2)} —Ä–∞–∑)', color = 0x256845)
        emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
        emb.set_footer(text = f'–ë–∞–ª–∞–Ω—Å ‚Ä¢ {triada_num(self.coll.find_one({"_id": ctx.author.id})["cash"])} Cooper Coins')
        await ctx.send(embed = emb)

    #CREDIR
    @commands.slash_command(description = "Economy: –í—ã–¥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç ")
    @commands.default_member_permissions(administrator = True)
    async def credit(self, ctx, member: disnake.Member, amount: int):
        proc = round(amount * 1.3)
        self.coll.update_one({"_id": member.id}, {"$inc": {"loan": proc}})
        self.coll.update_one({"_id": member.id}, {"$inc": {"cash": amount}})
        self.coll.update_one({"_id": 1}, {"$inc": {"cash": -amount}})
        self.coll.update_one({"_id": 1}, {"$inc": {"bonus_cash": amount * 0.01}})
        await ctx.send(embed = disnake.Embed(description  = f'**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {ctx.author.mention} –≤—ã–¥–∞–ª –∫–µ—Ä–µ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention} –≤ —Ä–∞–∑–º–µ—Ä–µ `{amount}` Cooper Coins. –í–µ—Ä–Ω—É—Ç—å: {proc}**', color = 0xb9ff00))

    #MYCREDIT
    @commands.slash_command(description = "Economy: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–¥–∏—Ç–µ")
    async def mycredit(self, ctx):
        loan = self.coll.find_one({"_id": ctx.author.id})['loan']
        if loan == 0:
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, —É –≤–∞—Å –Ω–µ—Ç—É –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤!**', color = 0x854be8))
        else:
            emb = disnake.Embed(description = f'**{ctx.author.mention}, —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç!**', timestamp = ctx.created_at, color = 0x007cc0)
            emb.set_author(name = ctx.author, icon_url = ctx.author.avatar)
            emb.add_field(name = '–°—É–º–º–∞:', value = f'{loan} Cooper Coins')
            emb.set_footer(text = 'Opium üå¥ Bot')
            await ctx.send(embed = emb)

    #RETURN CREDIT
    @commands.slash_command(description = "Economy: –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç")
    async def return_credit(self, ctx, amount: int):
        loan = self.coll.find_one({"_id": ctx.author.id})['loan']
        money = self.coll.find_one({"_id": ctx.author.id})["cash"]
        if amount > money:
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, y –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins!**', color = 0xff0000), ephemeral = True)
        elif loan == 0:
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, —É –≤–∞—Å –Ω–µ—Ç—É –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤!**', color = 0x854be8), ephemeral = True)
        elif amount <= 0:
            await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), ephemeral = True)
        elif amount == loan:
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"loan": -amount}})
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": -amount}})
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": amount}})
            await ctx.send(embed = disnake.Embed(description = '**–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!**', color = 0xffec00))
        elif amount < loan:
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"loan": -amount}})
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": -amount}})
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": amount}})
            await ctx.send(embed = disnake.Embed(description = f'**–í—ã –≤–Ω–µ—Å–ª–∏ `{amount}` Cooper Coins. –û—Å—Ç–∞–ª–æ—Å—å: `{self.coll.find_one({"_id": ctx.author.id})["loan"]}`**', color = 0xffec00))
        else:
            self.coll.update_one({"_id": ctx.author.id}, {"$inc": {"cash": -loan}})
            amount = amount - loan
            await ctx.send(embed = disnake.Embed(description = f'**–í–æ—É, –≤—ã –≤–Ω–µ—Å–ª–∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ. –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞–º: `{amount}` Cooper Coins**', color = 0xffec00))
            self.coll.update_one({"_id": 1}, {"$inc": {"cash": loan}})
            self.coll.update_one({"_id": ctx.author.id}, {"$set": {"loan": 0}})

    #MYDEPOSIT
    @commands.slash_command(name = 'deposit', description = "Economy: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ")
    async def mydeposit(self, ctx):
        depc = int(self.coll.find_one({"_id": ctx.author.id})['deposit'])
        i = 0
        n = 10
        el = ['üîπ']
        while i < 7:
            if (depc >= 10000 * n and depc <= 99999 * n):
                el.append('üî∏')
            else:
                el.append('üîπ')
            i += 1
            n = n * 10
        if (depc >= 1 and depc <= 99999):
            el = ['üî∏', 'üîπ', 'üîπ', 'üîπ' ,'üîπ' ,'üîπ' ,'üîπ' ,'üîπ']
        emb = disnake.Embed(description = "**‚è≥ –î–µ–ø–æ–∑–∏—Ç –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ —á–∞—Å.\n\nüîã –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞:**\n ", color = 0x6117e0, timestamp = ctx.created_at)
        emb.set_author(name = f"{ctx.author.name}#{ctx.author.discriminator} | –î–µ–ø–æ–∑–∏—Ç –º–µ–Ω—é", icon_url = ctx.author.display_avatar)
        emb.add_field(name = 'üî∞ –£—Ä–æ–≤–µ–Ω—å', value = f"{el[0]} 1 LVL\n{el[1]} 2 LVL\n{el[2]} 3 LVL\n{el[3]} 4 LVL\n{el[4]} 5 LVL\n{el[5]} 6 LVL\n{el[6]}7 LVL\n{el[7]} 8 LVL")
        emb.add_field(name = "üí∞ –ë–∞–ª–∞–Ω—Å", value = f"{el[0]} 1 - 100K\n{el[1]} 100K - 1M\n{el[2]} 1M - 10M\n{el[3]} 10M - 100M\n{el[4]} 100M - 1B\n{el[5]} 1B - 10B\n{el[6]} 10B - 100B\n{el[7]} 100B - 1T")
        emb.add_field(name = "üîã –ü—Ä–æ—Ü–µ–Ω—Ç", value = f"{el[0]} 2%\n{el[1]} 1%\n{el[2]} 0.5%\n{el[3]} 0.25%\n{el[4]} 0.0625%\n{el[5]}0.015%\n{el[6]} 0.004%\n{el[7]} 0.0005%")
        emb.set_thumbnail(url = "https://img.freepik.com/free-vector/money-bag-with-pile-coins-and-bills-cash_24877-63660.jpg?w=2000")
        emb.set_footer(text = "Opium üå¥ Team", icon_url = "https://images-ext-2.discordapp.net/external/0k7jh0lZJpaJSxawcHt4wV3kF2D7Eltmso22nbAhIPM/%3Fsize%3D1024/https/cdn.discordapp.com/avatars/722921602026700861/654ff8c616269acc148f204c17670aaa.png?width=671&height=671")
        placeholder = "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç–æ–º"
        await ctx.response.send_message(embed = emb, view = Select1().add_item(MyDeposit(options = dep_options, placeholder = placeholder)), ephemeral = True)

    # #STATS(moderation)
    # @commands.slash_command(name = 'astats', description = "Economy: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î")
    # @commands.default_member_permissions(administrator = True)
    # async def __astats(self, ctx, *, member: disnake.Member = None):
    #     if member is None:
    #         member = ctx.author
    #     else:
    #         member = member
    #     data = self.coll.find_one({"_id": member.id})
    #     u_id = data["_id"]
    #     g_id = data["g_id"]
    #     name = f"{member.name}#{member.discriminator}"
    #     g_name = self.client.get_guild(g_id).name
    #     cash = data["cash"] 
    #     xp = data["xp"]
    #     lvl = data["lvl"]
    #     daily = data["daily"]
    #     sbonus = data["sbonus"]
    #     spot = data["spot"]
    #     dsbonus = data["dsbonus"]
    #     splist = data["splist"]
    #     sprice = data["sprice"]
    #     dsprice = data["dsprice"]
    #     loan = data["loan"]
    #     deposit = data["deposit"]
    #     jpwin = data["jpwin"]
    #     tires = '‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî'
    #     emb = disnake.Embed(
    #         title = 'DB Document', 
    #         description = f'**User ID:** {u_id}\n**Guild ID:** {g_id}\n{tires}\n**User name:** {name}\n**Guild name:** {g_name}\n{tires}\n**Balance:** {cash}\n'
    #         f'**Xp:** {xp}\n**Lvl:** {lvl}\n{tires}\n**Spin(max. win):** {sbonus}\n**Daily spin(max. win):** {dsbonus}\n{tires}\n'
    #         f'**Jackpot(drop chance):** {spot}\n**Jackpot(win):** {jpwin}\n**Jackpot(list):** {splist}\n{tires}\n**Spin up(price):** {sprice}\n'
    #         f'**Daily spin up(price):** {dsprice}\n{tires}\n**Daily(status):** {daily}\n**Loan:** {loan}\n**Deposit:** {deposit}',
    #         timestamp = ctx.created_at,
    #         color = disnake.Colour.blue()
    #         )
    #     await ctx.send(embed = emb)

    #–†–ê–ó–ò–ì–†–ê–¢–¨ –ë–û–ù–£–°–ù–´–ô –°–ß–Å–¢
    @commands.slash_command(description = 'Economy: –†–∞–∑–∏–≥—Ä–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç')
    @commands.default_member_permissions(administrator = True)
    async def play_bonuses(self, ctx):
        a = []
        for  i in self.coll.find({'deposit': {"$gt": 1}}):
            a.append(i['_id'])
        bc = self.coll.find_one({'_id': 1})["bonus_cash"]
        bonus_cash = int(bc / len(a))
        self.coll.update_many({'deposit': {"$gt": 1}}, {"$inc": {"cash": bonus_cash}})
        e = disnake.Embed(description = f"**üí∞** `{triada_num(int(bc))}` **Cooper Coins –±—ã–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º –¥–µ–ø–æ–∑–∏—Ç–æ–º**", color = 0x00fc0b, timestamp = ctx.created_at)
        e.set_author(name = f"{ctx.guild.name} | –†–æ–∑–∏–≥—Ä—ã—à –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å—á—ë—Ç–∞", icon_url = ctx.guild.icon)
        e.set_footer(text = f"Opium üå¥ Bot", icon_url = "https://images-ext-2.disnakeapp.net/external/pqiZeryT3Hca0OgN9xevXnYrrApiVErU_TRWGXrc7SI/%3Fsize%3D4096/https/cdn.disnakeapp.com/avatars/722921602026700861/654ff8c616269acc148f204c17670aaa.png?width=671&height=671")
        self.coll.update_one({"_id": 1}, {"$set": {"bonus_cash": 0}})
        await ctx.send(embed = e)


    # #OREL
    # @commands.slash_command(description = "Economy: –°—ã–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –æ—Ä–µ–ª-—Ä–µ—à–∫–∞ –∫–∞–∫ –û—Ä–µ–ª")
    # async def orel(self, ctx, member: disnake.Member, cc: int):
    #     global content
    #     content = 'orel'
    #     global orauthor
    #     orauthor = ctx.author
    #     global ormember
    #     ormember = member
    #     global ccg
    #     ccg = cc
    #     aut_cash = self.coll.find_one({"_id": orauthor.id})["cash"]
    #     mem_cash = self.coll.find_one({"_id": ormember.id})["cash"]
    #     if ctx.author.id == member.id:
    #         await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π!**', color = 0xff0000), ephemeral = True)
    #     elif aut_cash < cc:
    #         await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, y –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins!**', color = 0xff0000), ephemeral = True)
    #     elif mem_cash < cc:
    #         await ctx.send(embed = disnake.Embed(description = f'**–£ {member.mention} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins**', color = 0xff0000), ephemeral = True)
    #     elif cc <= 0:
    #         await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), ephemeral = True)
    #     else:
    #         emb = disnake.Embed(description = f'**{ctx.author.mention} –ø—Ä–µ–¥–ª–æ–∂–∏–ª {member.mention} –∏–≥—Ä—É –Ω–∞ {cc} cc\n\n{ctx.author.display_name} - <:verified:768155762425462784>\n{member.display_name} - <:unverified:768155761171234887>**', color = 0x425be0)
    #         emb.set_author(name = f'{ctx.guild.name} | –û—Ä—ë–ª - –†–µ—à–∫–∞', icon_url = ctx.guild.icon)
    #         emb.set_footer(text = f'(–û—Ä—ë–ª) {ctx.author.name} x {member.name} (–†–µ—à–∫–∞)')
    #         global ormsg
    #         await ctx.send(embed = emb)
    #         ormsg = await ctx.original_response()
    #         await ormsg.add_reaction('<:verified:768155762425462784>')
    #         await ormsg.add_reaction('<:unverified:768155761171234887>')

    # #RESHKA
    # @commands.slash_command(description = "Economy: –°—ã–≥—Ä–∞—Ç—å —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –æ—Ä–µ–ª-—Ä–µ—à–∫–∞ –∫–∞–∫ –†–µ—à–∫–∞")
    # async def reshka(self, ctx, member: disnake.Member, cc: int):
    #     global content
    #     content = 'reshka'
    #     global orauthor1
    #     orauthor1 = ctx.author
    #     global ormember1
    #     ormember1 = member
    #     global ccg1
    #     ccg1 = cc
    #     aut_cash = self.coll.find_one({"_id": orauthor1.id})["cash"]
    #     mem_cash = self.coll.find_one({"_id": ormember1.id})["cash"]
    #     if ctx.author.id == member.id:
    #         await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π!**', color = 0xff0000), ephemeral = True)
    #     elif aut_cash < cc:
    #         await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, y –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins!**', color = 0xff0000), ephemeral = True)
    #     elif mem_cash < cc:
    #         await ctx.send(embed = disnake.Embed(description = f'**–£ {member.mention} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Cooper Coins**', color = 0xff0000), ephemeral = True)
    #     elif cc <= 0:
    #         await ctx.send(embed = disnake.Embed(description = f'**{ctx.author.mention}, –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**', color = 0xff0000), ephemeral = True)
    #     else:
    #         emb = disnake.Embed(description = f'**{ctx.author.mention} –ø—Ä–µ–¥–ª–æ–∂–∏–ª {member.mention} –∏–≥—Ä—É –Ω–∞ {cc} cc\n\n{ctx.author.display_name} - <:verified:768155762425462784>\n{member.display_name} - <:unverified:768155761171234887>**', color = 0x425be0)
    #         emb.set_author(name = f'{ctx.guild.name} | –û—Ä—ë–ª - –†–µ—à–∫–∞', icon_url = ctx.guild.icon)
    #         emb.set_footer(text = f'(–†–µ—à–∫–∞) {ctx.author.name} x {member.name} (–û—Ä—ë–ª)')
    #         global ormsg1
    #         await ctx.send(embed = emb)
    #         ormsg1 = await ctx.original_response()
    #         await ormsg1.add_reaction('<:verified:768155762425462784>')
    #         await ormsg1.add_reaction('<:unverified:768155761171234887>')


    # #ON RAW REACTION ADD
    # @commands.Cog.listener()
    # async def on_raw_reaction_add(self, payload):
    #     try:
    #         channel = self.client.get_channel(1053199351264059453)
    #         if payload.member.bot:
    #             return
    #         if content == 'orel':
    #             if payload.member.id == ormember.id:
    #                 if payload.message_id == ormsg.id:
    #                     if payload.emoji.id == 768155762425462784:
    #                         emb = disnake.Embed(description = f'**{orauthor.mention} –ø—Ä–µ–¥–ª–æ–∂–∏–ª {ormember.mention} –∏–≥—Ä—É –Ω–∞ {ccg} cc\n\n{orauthor.display_name} - <:verified:768155762425462784>\n{ormember.display_name} - <:verified:768155762425462784>**', color = 0x425be0)
    #                         emb.set_author(name = f'{payload.member.guild.name} | –û—Ä—ë–ª - –†–µ—à–∫–∞', icon_url = payload.member.guild.icon)
    #                         emb.set_footer(text = f'(–û—Ä—ë–ª) {orauthor.name} x {ormember.name} (–†–µ—à–∫–∞)')
    #                         await ormsg.edit(embed = emb)
    #                         await asyncio.sleep(1)
    #                         n = randint(0, 1)
    #                         if n == 0:
    #                             self.coll.update_one({"_id": orauthor.id}, {"$inc": {"cash": ccg}})
    #                             self.coll.update_one({"_id": ormember.id}, {"$inc": {"cash": -ccg}})
    #                             self.coll.update_one({"_id": 1}, {"$inc": {"cash": ccg}})
    #                             e1 = disnake.Embed(description = f'**–í—ã–ø–∞–ª–æ: –û—Ä—ë–ª\n–ü–æ–±–µ–¥–∞ {orauthor.mention}, + {ccg} Cooper Coins**', color = 0x1b7fdf)
    #                             e1.set_author(name = f'{payload.member.guild.name} | –û—Ä—ë–ª - –†–µ—à–∫–∞', icon_url = payload.member.guild.icon)
    #                             e1.set_footer(text = f'(–û—Ä—ë–ª) {orauthor.name} x {ormember.name} (–†–µ—à–∫–∞)')
    #                             await channel.send(embed = e1)
    #                             await ormsg.delete()
    #                         elif n == 1:
    #                             self.coll.update_one({"_id": ormember.id}, {"$inc": {"cash": ccg}})
    #                             self.coll.update_one({"_id": orauthor.id}, {"$inc": {"cash": -ccg}})
    #                             self.coll.update_one({"_id": 1}, {"$inc": {"cash": ccg}})
    #                             e2 = disnake.Embed(description = f'**–í—ã–ø–∞–ª–æ: –†–µ—à–∫–∞\n–ü–æ–±–µ–¥–∞ {ormember.mention}, + {ccg} Cooper Coins**', color = 0x1b7fdf)
    #                             e2.set_author(name = f'{payload.member.guild.name} | –û—Ä—ë–ª - –†–µ—à–∫–∞', icon_url = payload.member.guild.icon)
    #                             e2.set_footer(text = f'(–û—Ä—ë–ª) {orauthor.name} x {ormember.name} (–†–µ—à–∫–∞)')
    #                             await channel.send(embed = e2)
    #                             await ormsg.delete()
    #                         else:
    #                             return
    #             if (payload.member.id == ormember.id or payload.member.id == orauthor.id):
    #                 if payload.message_id == ormsg.id:
    #                     if payload.emoji.id == 768155761171234887:
    #                         await ormsg.delete()
    #         if content == 'reshka':
    #             if payload.member.id == ormember1.id:
    #                 if payload.message_id == ormsg1.id:
    #                     if payload.emoji.id == 768155762425462784:
    #                         emb = disnake.Embed(description = f'**{orauthor1.mention} –ø—Ä–µ–¥–ª–æ–∂–∏–ª {ormember1.mention} –∏–≥—Ä—É –Ω–∞ {ccg1} cc\n\n{orauthor1.display_name} - <:verified:768155762425462784>\n{ormember1.display_name} - <:verified:768155762425462784>**', color = 0x425be0)
    #                         emb.set_author(name = f'{payload.member.guild.name} | –û—Ä—ë–ª - –†–µ—à–∫–∞', icon_url = payload.member.guild.icon)
    #                         emb.set_footer(text = f'(–†–µ—à–∫–∞) {orauthor1.name} x {ormember1.name} (–û—Ä—ë–ª)')
    #                         await ormsg1.edit(embed = emb)
    #                         await asyncio.sleep(1)
    #                         n = randint(0, 1)
    #                         if n == 0:
    #                             self.coll.update_one({"_id": ormember1.id}, {"$inc": {"cash": ccg1}})
    #                             self.coll.update_one({"_id": orauthor1.id}, {"$inc": {"cash": -ccg1}})
    #                             self.coll.update_one({"_id": 1}, {"$inc": {"cash": ccg1}})
    #                             e1 = disnake.Embed(description = f'**–í—ã–ø–∞–ª–æ: –û—Ä—ë–ª\n–ü–æ–±–µ–¥–∞ {ormember1.mention}, + {ccg1} Cooper Coins**', color = 0x1b7fdf)
    #                             e1.set_author(name = f'{payload.member.guild.name} | –û—Ä—ë–ª - –†–µ—à–∫–∞', icon_url = payload.member.guild.icon)
    #                             e1.set_footer(text = f'(–†–µ—à–∫–∞) {orauthor1.name} x {ormember1.name} (–û—Ä—ë–ª)')
    #                             await channel.send(embed = e1)
    #                             await ormsg1.delete()
    #                         elif n == 1:
    #                             self.coll.update_one({"_id": orauthor1.id}, {"$inc": {"cash": ccg1}})
    #                             self.coll.update_one({"_id": ormember1.id}, {"$inc": {"cash": -ccg1}})
    #                             self.coll.update_one({"_id": 1}, {"$inc": {"cash": ccg1}})
    #                             e2 = disnake.Embed(description = f'**–í—ã–ø–∞–ª–æ: –†–µ—à–∫–∞\n–ü–æ–±–µ–¥–∞ {orauthor1.mention}, + {ccg1} Cooper Coins**', color = 0x1b7fdf)
    #                             e2.set_author(name = f'{payload.member.guild.name} | –û—Ä—ë–ª - –†–µ—à–∫–∞', icon_url = payload.member.guild.icon)
    #                             e2.set_footer(text = f'(–†–µ—à–∫–∞) {orauthor1.name} x {ormember1.name} (–û—Ä—ë–ª)')
    #                             await channel.send(embed = e2)
    #                             await ormsg1.delete()
    #                         else:
    #                             return
    #             if (payload.member.id == ormember1.id or payload.member.id == orauthor1.id):
    #                 if payload.message_id == ormsg1.id:
    #                     if payload.emoji.id == 768155761171234887:
    #                         await ormsg1.delete()
    #     except NameError:
    #         return

def setup(client):
    client.add_cog(EconomyNew(client))