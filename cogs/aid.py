import disnake
from disnake.ext import commands
import os
import asyncio
import pymongo
from pymongo import MongoClient
from main import autocomp_adm_command
from main import autocomp_command

set_options1 = [
    disnake.SelectOption(label = '/set lang', value = "LANG", description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã—ã –¥–ª—è Big-dick game", emoji = "üë®üèº"),
    disnake.SelectOption(label = '/set channel', value = "CHANNEL", description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è Big-dick game", emoji = "üë®üèº"),
    disnake.SelectOption(label = '/set nick', value = "NICK", description = "–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", emoji = "üñäÔ∏è"),
    disnake.SelectOption(label = '/set balance', value = "BALANCE", description = "Economy: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", emoji = "üí∞"),
    disnake.SelectOption(label = '/set lvl', value = "LVL", description = "Economy: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", emoji = "üí∞"),
    disnake.SelectOption(label = '/set log-channel', value = "LOG-CHANNEL", description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤", emoji = "üìï"),
    disnake.SelectOption(label = '/set welcome-channel', value = "WELCOME-CHANNEL", description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª", emoji = "üñêÔ∏è")
]

set_options = [
    disnake.SelectOption(label = '/set lang', value = "LANG", description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã—ã –¥–ª—è Big-dick game", emoji = "üë®üèº"),
    disnake.SelectOption(label = '/set channel', value = "CHANNEL", description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è Big-dick game", emoji = "üë®üèº"),
    disnake.SelectOption(label = '/set nick', value = "NICK", description = "–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", emoji = "üñäÔ∏è"),
    disnake.SelectOption(label = '/set balance', value = "BALANCE", description = "Economy: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", emoji = "üí∞"),
    disnake.SelectOption(label = '/set lvl', value = "LVL", description = "Economy: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", emoji = "üí∞"),
    disnake.SelectOption(label = '/set log-channel', value = "LOG-CHANNEL", description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤", emoji = "üìï"),
    disnake.SelectOption(label = '/set welcome-channel', value = "WELCOME-CHANNEL", description = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª", emoji = "üñêÔ∏è"),
    disnake.SelectOption(label = '–í—ã—Ö–æ–¥', value = "EXIT", description = "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", emoji = "üîô")
]

class SelectMenu(disnake.ui.Select):
    def __init__(self, options, placeholder):
        super().__init__(placeholder = placeholder, options = options, max_values = 1)
    async def callback(self, interaction: disnake.Interaction):
        for val in self.values:
            if val == "LANG":
                emb = disnake.Embed(title = "Command: /set lang", description = "**–û–ø–∏—Å–∞–Ω–∏–µ**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –¥–ª—è Big-gick game\n**Cooldown**: None\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n/set lang [–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞/–†—É—Å—Å–∫–∏–π]\n**–ü—Ä–∏–º–µ—Ä:**\n/set lang –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\n/set lang –†—É—Å—Å–∫–∏–π", color = 0x40d406)
                await interaction.response.edit_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options, placeholder = "üë®üèº /set lang")))
            elif val == 'CHANNEL':
                emb = disnake.Embed(title = "Command: /set channel", description = "**–û–ø–∏—Å–∞–Ω–∏–µ**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è Big-gick game\n**Cooldown**: None\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n/set channel [TextChannel]\n**–ü—Ä–∏–º–µ—Ä:**\n/set channel #big-dick-game", color = 0x40d406)
                await interaction.response.edit_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options, placeholder = "üë®üèº /set channel")))
            elif val == 'NICK':
                emb = disnake.Embed(title = "Command: /set nick", description = "**–û–ø–∏—Å–∞–Ω–∏–µ**: –°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n**Cooldown**: None\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n/set nick [member] [NickName]\n**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤\n**–ü—Ä–∏–º–µ—Ä:**\n/set nick @cooper#0001 anthony cooper", color = 0x40d406)
                await interaction.response.edit_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options, placeholder = "üñäÔ∏è /set nick")))
            elif val == 'BALANCE':
                emb = disnake.Embed(title = "Command: /set balance", description = "**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** Economy\n**–û–ø–∏—Å–∞–Ω–∏–µ**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n**Cooldown**: None\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n/set balance [member] [amount]\n**–ü—Ä–∏–º–µ—Ä:**\n/set balance @cooper#0001 500", color = 0x40d406)
                await interaction.response.edit_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options, placeholder = "üí∞ /set balance")))
            elif val == 'LVL':
                emb = disnake.Embed(title = "Command: /set lvl", description = "**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** Economy\n**–û–ø–∏—Å–∞–Ω–∏–µ**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n**Cooldown**: None\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n/set lvl [member] [lvl]\n**–ü—Ä–∏–º–µ—Ä:**\n/set lvl @cooper#0001 12", color = 0x40d406)
                await interaction.response.edit_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options, placeholder = "üí∞ /set lvl")))
            elif val == 'LOG-CHANNEL':
                emb = disnake.Embed(title = "Command: /set log-channel", description = "**–û–ø–∏—Å–∞–Ω–∏–µ**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤\n**Cooldown**: None\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n/set log-channel [TextChannel]\n**–ü—Ä–∏–º–µ—Ä:**\n/set log-channel #log-channel", color = 0x40d406)
                await interaction.response.edit_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options, placeholder = "üìï /set log-channel")))
            elif val == 'WELCOME-CHANNEL':
                emb = disnake.Embed(title = "Command: /set welcome-channel", description = "**–û–ø–∏—Å–∞–Ω–∏–µ**: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª\n**Cooldown**: None\n**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n/set welcome-channel [TextChannel]\n**–ü—Ä–∏–º–µ—Ä:**\n/set welcome-channel #welcome", color = 0x40d406)
                await interaction.response.edit_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options, placeholder = "üñêÔ∏è /set welcome-channel")))
            elif val == 'EXIT':
                emb = disnake.Embed(title = "Command: /set", description = f'**‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è**', color = 0x40d406)
                await interaction.response.edit_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options1, placeholder = "üîé View subcommands")))
            else:
                pass

class Select(disnake.ui.View):
    def __init__(self):
        super().__init__()

class Aid(commands.Cog):

    def __init__(self, client):
        self.client = client
        self.cluster = MongoClient("mongodb+srv://andrewnobot:xuInmV8QmD9GRR5c@cluster0.28biu.mongodb.net/opiumdb?retryWrites=true&w=majority", connect = False)
        self.prx = self.cluster.opiumdb.prefixcoll

    #ON MESSAGE
    @commands.Cog.listener()
    async def on_message(self, message):
        try:
            prefix = self.prx.find_one({"_id": message.guild.id})["prefix"]
            if message.author == self.client.user:
                return
            if message.content.startswith('$help$'):
                await message.delete()
                emb = disnake.Embed(description = '**Help: [Support Server](https://discord.gg/sWHrXQT)\nAdd Opium: [Invite Opium to your Server](https://discord.com/api/oauth2/authorize?client_id=722921602026700861&permissions=8&scope=bot)**\n**–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ: {}help [–∏–º—è_–∫–æ–º–∞–Ω–¥—ã]**'.format(prefix))
                emb.set_author(name = f"–ü—Ä–µ—Ñ–∏–∫—Å –Ω–∞ {message.guild.name} =  ' {prefix} '", icon_url = message.guild.icon)
                await message.author.send(embed = emb)
            if message.content.startswith('prefix'):
                await message.channel.send(f'**Prefix on {message.guild.name}: `{prefix}`**')
        except AttributeError:
            pass

    #HELP
    @commands.slash_command(name = "help", description = '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ')
    async def help_command(self, ctx: disnake.ApplicationCommandInteraction, command_name: str = commands.Param(autocomplete = autocomp_command)):
        if command_name == "set":
            pass

    #MODERATORS HELP
    @commands.slash_command(name = "help_admin", description = "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    @commands.default_member_permissions(administrator = True)
    async def help_admin_command(self, ctx: disnake.ApplicationCommandInteraction, command_name: str = commands.Param(autocomplete = autocomp_adm_command)):
        if command_name == "set":
            emb = disnake.Embed(title = "Command: /set", description = f'**‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É ‚¨áÔ∏è**', color = 0x40d406)
            placeholder = "üîé View subcommands"
            await ctx.response.send_message(embed = emb, view = Select().add_item(SelectMenu(options = set_options1, placeholder = placeholder)), ephemeral = True)           

def setup(client):
    client.add_cog(Aid(client))