import disnake
from disnake.ext import commands
import os
import pymongo
from pymongo import MongoClient
import time
import datetime
from datetime import timezone, tzinfo, timedelta
from main import sets

class Logs(commands.Cog):

    def __init__(self, client):
        self.client = client
        self.cluster = MongoClient("mongodb+srv://andrewnobot:xuInmV8QmD9GRR5c@cluster0.28biu.mongodb.net/opiumdb?retryWrites=true&w=majority")
        self.coll = self.cluster.opiumdb.prefixcoll

    @sets.sub_command(name = "log-channel", description = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤')
    async def set_log_channel(self, ctx, textchannel: disnake.TextChannel):
        logchannel = textchannel.id
        self.coll.update_one({"_id": ctx.guild.id}, {"$set": {"logchannel": logchannel}})
        await ctx.send(f"**–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: #{textchannel}**")

    @sets.sub_command(name = "welcome-channel", description = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª')
    async def set_welcome_channel(self, ctx, textchannel: disnake.TextChannel):
        welcomechannel = textchannel.id
        self.coll.update_one({"_id": ctx.guild.id}, {"$set": {"welcomechannel": welcomechannel}})
        await ctx.send(f"**–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {textchannel.mention}**")


    #ON MEMBER UPDATE
    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        logchannel = self.coll.find_one({"_id": before.guild.id})["logchannel"]
        if logchannel is None:
            return
        else:
            try:
                logch = self.client.get_channel(logchannel)
                if before.display_name != after.display_name:
                    e = disnake.Embed(title = f'{before.guild.name} | –°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞', color = 0x546c9b, description = f'**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {before.mention}\n\n–î–æ: `{before.display_name}`\n\n–ü–æ—Å–ª–µ: `{after.display_name}`**')
                    await logch.send(embed = e)
            except AttributeError:
                return
                    

    #ON MESSAGE EDIT
    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        logchannel= self.coll.find_one({"_id": before.guild.id})["logchannel"]
        if logchannel is None:
            return
        else:
            try:
                logch = self.client.get_channel(logchannel)
                if before.channel == logch:
                    return
                elif before.embeds or after.embeds:
                    return
                else:
                    e = disnake.Embed(title = f'{before.guild.name} | –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ ‚úâÔ∏è üñäÔ∏è', description = f'**{before.author.mention} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª(–∞) —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ\n–≤ –∫–∞–Ω–∞–ª–µ #{before.channel.name}. [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é]({before.jump_url})**')
                    e.add_field(name = '–î–æ:', value = before.content, inline = False)
                    e.add_field(name = '–ü–æ—Å–ª–µ:', value = after.content, inline = False)
                    e.set_footer(text = f'Message ID: {before.id} ‚Ä¢  Author ID: {before.author.id}', icon_url = before.author.avatar)
                    await logch.send(embed = e)
            except AttributeError:
                pass
            except disnake.errors.HTTPException:
                pass


    #ON MESSAGE DELETE
    @commands.Cog.listener()
    async def on_message_delete(self, message):
        logchannel= self.coll.find_one({"_id": message.guild.id})["logchannel"]
        if logchannel is None:
            return
        else:
            try:
                logch = self.client.get_channel(logchannel)
                if message.channel == logch:
                    return
                elif message.author.bot:
                    return
                async for event in message.guild.audit_logs(limit = 1, action = disnake.AuditLogAction.message_delete):
                    if getattr(event.target, "id") == message.author.id:
                        e = disnake.Embed(description = f'**–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.author.mention}. –ö–∞–Ω–∞–ª: {message.channel.mention}\n–°–æ–æ–±—â–µ–Ω–∏–µ:** {message.content}')
                        e.set_author(name = f'{message.guild.name} | –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ ‚úâÔ∏è‚ùå', icon_url = message.author.avatar)
                        e.set_footer(text = f'Message ID: {message.id} ‚Ä¢  Delete by: {event.user.display_name}', icon_url = event.user.avatar)
                        await logch.send(embed = e)
                    else:
                        e = disnake.Embed(description = f'**–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.author.mention}. –ö–∞–Ω–∞–ª: {message.channel.mention}\n–°–æ–æ–±—â–µ–Ω–∏–µ:** {message.content}')
                        e.set_author(name = f'{message.guild.name} | –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ ‚úâÔ∏è‚ùå', icon_url = message.author.avatar)
                        e.set_footer(text = f'Message ID: {message.id} ‚Ä¢  Delete by: {message.author.display_name}', icon_url = message.author.avatar)
                        await logch.send(embed = e)
                else:
                    return
            except AttributeError:
                pass
            
    #ON MEMBER JOIN
    @commands.Cog.listener()
    async def on_member_join(self, member):
        welcomechannel= self.coll.find_one({"_id": member.guild.id})["welcomechannel"]
        if welcomechannel is None:
            return
        else:
            try:
                logch = self.client.get_channel(welcomechannel)
                emb = disnake.Embed(title = '‚òëÔ∏è‚†Ä–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', color = 0x951fad, description = f'\n\n**{member}** –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(-–∞—Å—å) –∫ —Å–µ—Ä–≤–µ—Ä—É!')
                emb.set_thumbnail(url = member.avatar)
                emb.set_footer(text = f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {member.guild.member_count}')
                await logch.send(embed = emb)
            except AttributeError:
                pass

    #ON MEMBER REMOVE
    @commands.Cog.listener()
    async def on_member_remove(self, member):
        welcomechannel= self.coll.find_one({"_id": member.guild.id})["welcomechannel"]
        if welcomechannel is None:
            return
        else:
            try:
                logch = self.client.get_channel(welcomechannel)
                emb = disnake.Embed(title = '‚ùå‚†Ä–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏', color = 0x951fad, description = f'\n\n**{member}** –ø–æ–∫–∏–Ω—É–ª(-–∞) —Å–µ—Ä–≤–µ—Ä!')
                emb.set_thumbnail(url = member.avatar)
                emb.set_footer(text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {member.guild.member_count}')
                await logch.send(embed = emb)
            except AttributeError:
                pass
def setup(client):
    client.add_cog(Logs(client))